var path = require('path');

module.exports = function(grunt) {
    // Change current working directory to this npm module's directory
    var parentcwd = process.cwd();
    process.chdir(path.join(__dirname, '../'));

    // load npm tasks
    var npmTasks = [
        'grunt-cachebuster',
        'grunt-contrib-connect',
        'grunt-contrib-watch',
        'grunt-mobify-cloud',
        'grunt-mocha-phantomjs',
        'grunt-requirejs',
        'grunt-sync',
        'grunt-contrib-htmlmin',
        'grunt-postcss',
        'grunt-contrib-uglify',
        'grunt-available-tasks'
    ];

    npmTasks.forEach(function(taskName) {
        if (!grunt.task._tasks[taskName]) {
            grunt.loadNpmTasks(taskName);
        }
    });

    // restore cwd
    process.chdir(parentcwd);

    var tasksMap = {
        'adaptive-save_credentials': 'mobify-save_credentials',
        // Do a version check at the end since it's just a warning (don't want the output to get hidden by mobify-upload)
        'adaptive-upload': ['mobify-upload', 'adaptive-check_version'],
        'adaptive-serve': ['connect:test:keepalive'],
        // Build tasks
        'adaptive-build_dev': ['adaptive-ensure_synced', 'sync', 'requirejs:ui', 'cachebuster', 'adaptive-build_config', 'requirejs:adaptation', 'adaptive-build_preloader', 'requirejs:loader'],
        'adaptive-build_prod': ['adaptive-ensure_synced', 'sync', 'requirejs:uiMin', 'cachebuster', 'adaptive-build_config', 'requirejs:adaptationMin', 'adaptive-build_preloader', 'requirejs:loaderMin'],
        'adaptive-build': ['adaptive-build_dev'],

        'adaptive-preview': ['connect:http', 'connect:https', 'adaptive-preview_link', 'watch'],

        'adaptive-test_browser': ['connect:test:keepalive'],
        'adaptive-test_ci': ['connect:test', 'mocha_phantomjs:ci'],
        'adaptive-test': ['connect:test', 'mocha_phantomjs:local'],

        'adaptive-push': ['adaptive-build_prod', 'adaptive-upload'],
        'default': 'help'
    };

    Object.keys(tasksMap).forEach(function(key) {
        grunt.registerTask(key, tasksMap[key]);
    });
};
