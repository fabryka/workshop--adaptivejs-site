var semver = require('semver');

module.exports = function(grunt) {
    // Grab the version of adaptivejs
    var getAdaptiveVersionFromNpmJson = function(stdout) {
        try {
            var versionInfo = JSON.parse(stdout);
            if (typeof versionInfo == 'string') {
                return versionInfo;
            } else {
                return versionInfo['dependencies']['adaptivejs']['version'];
            }
        } catch (e) {
            return undefined;
        }
    };

    // Check whether the installed version of adaptive.js is the latest version
    // in NPM. If it isn't, tell users to upgrade.
    grunt.registerTask('adaptive-check_version', function() {
        var done = this.async();

        console.log('Checking for newer versions of adaptivejs...');

        grunt.util.spawn({cmd: 'npm', args: ['list', 'adaptivejs', '--json']}, function(err, result) {
            var localError = 'There was an error getting the local version of adaptivejs';
            // Checking for result here rather then error because there are situations where you still get
            // the version information, but it comes with an error as well (like when testing using
            // npm link). As long as there is a result, we're good to continue.
            if (!result) {
                console.log(localError);
                return console.log(err);
            }
            var localVersion = getAdaptiveVersionFromNpmJson(result.stdout);
            if (!localVersion) {
                return console.log(localError);
            }

            grunt.util.spawn({cmd: 'npm', args: ['view', 'adaptivejs', 'version', '--json']}, function(err, result) {
                var latestError = 'There was an error getting the latest version of adaptivejs';
                // Checking for result here rather then error because there are situations where you still get
                // the version information, but it comes with an error as well (like when testing using
                // npm link). As long as there is a result, we're good to continue.
                if (!result) {
                    return console.log(latestError);
                }
                var latestVersion = getAdaptiveVersionFromNpmJson(result.stdout);
                if (!latestVersion) {
                    return console.log(latestError);
                }

                // If the local version is not less then the latest version on the
                // npm repo, return
                if (semver.gte(localVersion, latestVersion)) {
                    console.log('The version of adaptive.js you have installed is up-to-date!');
                } else {
                    console.log('\nWARNING: The version of your adaptivejs package is out of date. ' +
                                'You are currently running version ' + localVersion + '.\n' +
                                'We recommend that you upgrade to the latest version (' + latestVersion + ').\n' +
                                'You can do this by changing the version in your package.json file ' +
                                'and then running `npm install`');
                }

                return done();
            });
        });
    });
}
