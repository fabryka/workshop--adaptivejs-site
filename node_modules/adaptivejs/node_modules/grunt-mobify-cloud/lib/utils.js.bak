var grunt = require('grunt');
var fs = require('fs');
var archiver = require('archiver');
var Request = require('request');
var packageJSON = require('../package.json');

var defaultHost = 'cloud.mobify.com';

exports.createArchive = function(paths, projectSlug, destination, cb) {

    var output = fs.createWriteStream(destination);
    var archive = archiver('tar');

    archive.on('error', function(err) {
        throw err;
    });

    archive.pipe(output);

    // Filter out directories
    var files = paths.filter(function(f) {
        return grunt.file.isFile(f);
    });

    files.forEach(function(srcFile) {
        var filepath = srcFile.replace(/[^\/]+\//, '');

        // Cloud expects the folder structure /projectname/bld/all_your_files
        archive.file(srcFile, {name: projectSlug + '/bld/' + filepath});
    });

    archive.finalize();

    // Wait for archive to finish getting written.
    output.on('finish', cb);
};

exports.readCredentials = function(filepath) {
    // Read credentials
    if (!grunt.file.exists(filepath)) {
        grunt.fail.warn('Settings file "' + filepath + '" not found.');
        return false;
    }

    var creds = grunt.file.readJSON(filepath);

    return creds.username + ':' + creds.api_key;
};

exports.buildRequest = function(options, cb) {
    // Avoids DEPTH_ZERO_SELF_SIGNED_CERT error for self-signed certs
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"; 

    var opts = {
        uri: options.origin + '/api/projects/' + options.projectSlug + '/builds/',
        method: 'POST',
        auth: options.auth,
        headers: {
            'Content-Length': options.dataLength,
            'User-Agent': 'grunt-mobify#' + packageJSON.version
        }
    };

    var request = new Request(opts, function(err, response, body) {
        if (err){
            throw(new Error('Failed uploading build ' + '" (status code: ' + response.statusCode + ') - ' + opts.method + ' @ ' + opts.uri));
        }

        var status = response.statusCode;
        var msg;
        if (status >= 400) {
            if (status === 401){
              msg = "Request unauthorized. Check your credentials.";
            }
            else if (status === 404){
              msg = "Project not found. Check your project name";
            }
            else{
              msg = "Got a bad response: " + body;
            }
            throw(new Error(msg));
        }
        else {
            console.log('Build uploaded!');
        }
        cb();
    });
    return request;
};

exports.buildObject = function(filepath, message){
    // encoding: null ensures that a Buffer is returned
    var data = grunt.file.read(filepath, {encoding: null});

    // Encode data and assemble object to upload
    var base64data = data.toString('base64');

    var buildObj = {
        message: message || '',
        encoding: "base64",
        data: base64data
    };

    return buildObj;
};
